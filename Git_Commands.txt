git clone  "https:/repo"
git status (To check the status of git if we're in the stage area or remote")
git add    (The name of the file / or * to add all )
git commit -c "comments" (to comment the process that u done )
git reset head file_name (To come back in the locale stage area )
-----------------------------------------------------------------------------------------------------------------------------------
git branch (to know all the branches/Name in your local)
git push Remote_Repo_Name Branch_Name 
git remot --v (To know the Remote Repo Name)
git push origine master 
----------------------------------------------------------------------------------------------------------------------------------- 
git commit tata.txt -m "new line updtaed" (This is how to do another commit if u change something in the file)
git pull "Remote_Repo"

#// This link is useful if you want to troublshoot the adding of ssh_keys
(https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account)
-----------------------------------------------------------------------------------------------------------------------------------
git config --global user.name "the name "
git config --global user.email "the email"
git config --global unset user.name (if you wante to remove or modify this one"
git help config
git config --list
git config --global --edit
-----------------------------------------------------------------------------------------------------------------------------------
Create local Repo or a project from scratch then push it to a new romte repo in git 
1/Create your working directory and add the necessary files 
2/git init (to initialize an empty working directory)
3/moving from working directory to the staging area then the local repo
4/creating your remote repo in GIthub
5/git remote add origin "add the remote origin link"
6/git push -u origin master (The u means that you do a pulled then push toghether for example consider that you're working as a team
and someone previously add some file to the working directory so its not logical to do just a push you don need firstly to have the changes 
that made by the team"
-----------------------------------------------------------------------------------------------------------------------------------
Learn Pull Request with real examples 
Pull requests are usefull if you're working with a team and from it the centralized server knows that there is some modification that they need to be up to date
but before the responsible of the project accept it 'i mean the pull request) they will need to check if everything is OK then they do a merge.
1/you do the modification 
2/you commit your work 
3/you do a pull request (new pull request and create a pull request )

The second choice is when you do a pul request in a new branch and not in the main branch and after that you can delete it or delete completley the fork
and notice that there is a specific pattern for the naming of the branch based on the feature you're working in.
 